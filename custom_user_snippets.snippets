{
	// ============================================
	// JAVASCRIPT / TYPESCRIPT / REACT
	// ============================================
	"Print to console": {
		"prefix": "cl",
		"scope": "javascript,typescript,javascriptreact",
		"body": [
			"console.log($1)"
		],
		"description": "console.log"
	},
	"React Component": {
		"prefix": "rfc",
		"scope": "javascript,typescript,javascriptreact",
		"body": [
			"function ${1:${TM_FILENAME_BASE}}() {",
			"\treturn (",
			"\t\t<div>",
			"\t\t\t$0",
			"\t\t</div>",
			"\t)",
			"}",
			"",
			"export default ${1:${TM_FILENAME_BASE}}",
			""
		],
		"description": "React component"
	},
	"React Styled Component": {
		"prefix": "rsc",
		"scope": "javascript,typescript,javascriptreact",
		"body": [
			"import styled from 'styled-components'",
			"",
			"const Styled${TM_FILENAME_BASE} = styled.$0``",
			"",
			"function ${TM_FILENAME_BASE}() {",
			"\treturn (",
			"\t\t<Styled${TM_FILENAME_BASE}>",
			"\t\t\t${TM_FILENAME_BASE}",
			"\t\t</Styled${TM_FILENAME_BASE}>",
			"\t)",
			"}",
			"",
			"export default ${TM_FILENAME_BASE}",
			""
		],
		"description": "React styled component"
	},
	// ============================================
	// PYTHON - DASH
	// ============================================
	"Dash Boilerplate": {
		"scope": "python",
		"prefix": "dashboiler",
		"body": [
			"from dash import Dash, html, dcc, callback, Output, Input, State",
			"import pandas as pd",
			"import plotly.express as px",
			"import dash_bootstrap_components as dbc",
			"from pathlib import Path",
			"",
			"local_csv_path = Path(__file__).parent.parent/'data'/'csv_file.csv'",
			"",
			"df = pd.read_csv('path_or_url')",
			"",
			"app = Dash(__name__, external_stylesheets=dbc.themes.BOOTSTRAP)",
			"",
			"server = app.server",
			"",
			"app.layout = dbc.Container([",
			"\t#components here",
			"])",
			"",
			"#callbacks here",
			"",
			"#TODO change True to False when deploying",
			"if __name__ == '__main__':",
			"\tapp.run(debug=True)",
			""
		],
		"description": "Create a simple Dash Boilerplate App"
	},
	"Dash Callback": {
		"scope": "python",
		"prefix": "dashcallback",
		"body": [
			"@callback(",
			"\tOutput(",
			"\t\tcomponent_id='${1:output_component_id}',",
			"\t\tcomponent_property='${2:output_property}',",
			"\t),",
			"\tInput(",
			"\t\tcomponent_id='${3:input_component_id}',",
			"\t\tcomponent_property='${4:input_property}'",
			"\t),",
			")",
			"def ${5:callback_function_name}(${6:function_parameters}):",
			"\t# callback logic here",
			"\treturn $0"
		],
		"description": "Create a Dash callback with updated syntax"
	},
	"Dash Page": {
		"scope": "python",
		"prefix": "dashpage",
		"body": [
			"import dash",
			"from dash import html, dcc, Input, Output, State",
			"import dash_bootstrap_components as dbc",
			"",
			"dash.register_page(__name__, path='${1:/url_path}')",
			"",
			"layout = dbc.Container([",
			"\tdbc.H1('hello')",
			"])",
			""
		],
		"description": "Create a Dash page"
	},
	"Dash Pages Main Boilerplate": {
		"scope": "python",
		"prefix": "dashpagesapp",
		"body": [
			"import dash",
			"from dash import Dash, html, dcc",
			"import dash_bootstrap_components as dbc",
			"",
			"app = Dash(__name__, use_pages=True)",
			"",
			"server = app.server",
			"",
			"app.layout = dbc.Container([",
			"\thtml.H1('Multi-page app with Dash pages'),",
			"\tdbc.Container([",
			"\t\tdbc.Container(",
			"\t\t\tdbc.NavLink(f\"{page['name']}\", href=page['relative_path'])",
			"\t\t) for page in dash.page_registry.values()",
			"\t]),",
			"\tdash.page_container",
			"])",
			"",
			"#TODO change True to False when deploying",
			"if __name__ == '__main__':",
			"\tapp.run(debug=True)",
			""
		],
		"description": "Create the main app.py file for a Dash pages app"
	},
	// ============================================
	// PYTHON - FASTAPI
	// ============================================
	"FastAPI GET Route": {
		"scope": "python",
		"prefix": "fget",
		"body": [
			"@router.get(\"/${1:path}\", status_code=status.${2|HTTP_200_OK,HTTP_404_NOT_FOUND,HTTP_400_BAD_REQUEST,HTTP_500_INTERNAL_SERVER_ERROR|})",
			"${3:async }def ${4:function_name}(${5:param}: ${6:str}) -> ${7:dict}:",
			"\t${0:return {\"message\": \"success\"}}"
		],
		"description": "FastAPI GET route"
	},
	"FastAPI POST Route": {
		"scope": "python",
		"prefix": "fpost",
		"body": [
			"@router.post(\"/${1:path}\", status_code=status.${2|HTTP_201_CREATED,HTTP_200_OK,HTTP_400_BAD_REQUEST,HTTP_422_UNPROCESSABLE_CONTENT,HTTP_500_INTERNAL_SERVER_ERROR|})",
			"${3:async }def ${4:function_name}(${5:param}: ${6:Model}) -> ${7:dict}:",
			"\t${0:return {\"message\": \"created\"}}"
		],
		"description": "FastAPI POST route"
	},
	"FastAPI PUT Route": {
		"scope": "python",
		"prefix": "fput",
		"body": [
			"@router.put(\"/${1:path}/{${2:id}}\", status_code=status.${3|HTTP_200_OK,HTTP_204_NO_CONTENT,HTTP_400_BAD_REQUEST,HTTP_404_NOT_FOUND,HTTP_500_INTERNAL_SERVER_ERROR|})",
			"${4:async }def ${5:function_name}(${2:id}: ${6:int}, ${7:param}: ${8:Model}) -> ${9:dict}:",
			"\t${0:return {\"message\": \"updated\"}}"
		],
		"description": "FastAPI PUT route"
	},
	"FastAPI DELETE Route": {
		"scope": "python",
		"prefix": "fdel",
		"body": [
			"@router.delete(\"/${1:path}/{${2:id}}\", status_code=status.${3|HTTP_204_NO_CONTENT,HTTP_200_OK,HTTP_404_NOT_FOUND,HTTP_400_BAD_REQUEST,HTTP_500_INTERNAL_SERVER_ERROR|})",
			"${4:async }def ${5:function_name}(${2:id}: ${6:int}) -> ${7:dict}:",
			"\t${0:return {\"message\": \"deleted\"}}"
		],
		"description": "FastAPI DELETE route"
	},
	"FastAPI Route with Dependencies": {
		"scope": "python",
		"prefix": "froute",
		"body": [
			"@router.${1|get,post,put,delete|}(\"/${2:path}\", status_code=status.${3|HTTP_200_OK,HTTP_201_CREATED,HTTP_204_NO_CONTENT,HTTP_400_BAD_REQUEST,HTTP_404_NOT_FOUND,HTTP_422_UNPROCESSABLE_CONTENT,HTTP_500_INTERNAL_SERVER_ERROR|})",
			"${4:async }def ${5:function_name}(",
			"\t${6:param}: ${7:RequestModel},",
			"\tdb: Session = Depends(get_db)",
			") -> ${8:ResponseModel}:",
			"\t${9:# Your logic here}",
			"\t${0:return response}"
		],
		"description": "FastAPI route with Pydantic models and DB dependency"
	},
	"FastAPI App Boilerplate": {
		"scope": "python",
		"prefix": "fboiler",
		"body": [
			"from fastapi import FastAPI, Depends, HTTPException",
			"from pydantic import BaseModel",
			"",
			"app = FastAPI()",
			"",
			"@app.get(\"/\")",
			"async def root():",
			"\treturn {\"message\": \"Hello World\"}",
			"",
			"if __name__ == \"__main__\":",
			"\timport uvicorn",
			"\tuvicorn.run(app, host=\"0.0.0.0\", port=8000)",
			""
		],
		"description": "Basic FastAPI application boilerplate"
	},
	"Pydantic Model": {
		"scope": "python",
		"prefix": "fmodel",
		"body": [
			"class ${1:ModelName}(BaseModel):",
			"\t${2:field_name}: ${3:str}",
			"\t$0",
			"",
			"\tclass Config:",
			"\t\tfrom_attributes = True"
		],
		"description": "Pydantic model with Config"
	},
	// ============================================
	// PHP
	// ============================================
	"PHP Tags": {
		"scope": "php",
		"prefix": "php",
		"body": [
			"<?php $1 ?>"
		],
		"description": "Create PHP tags with cursor in between"
	}
}
